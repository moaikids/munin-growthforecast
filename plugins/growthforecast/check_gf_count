#!/usr/bin/python
import os
import sys
import inspect
import json
import socket
import urllib
import urllib2
import urlparse
from optparse import OptionParser

def get_metrics(url, username=None, password=None):
    socket.setdefaulttimeout(10)
    if username and password:
        password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
        password_mgr.add_password(None, url, username, password)
        handler = urllib2.HTTPBasicAuthHandler(password_mgr)
        opener = urllib2.build_opener(handler)
        res = opener.open(url)
    else:
        req = urllib2.Request(url, None, {})
        res = urllib2.urlopen(req)
    data = json.load(res)
    rows = data['rows']
    rows.reverse()
    for row in rows:
        if row[0]:
          return int(row[0])

    return 0

def munin(host, prefix, suffix, namespaces, username=None, password=None):
    for namespace in namespaces:
        metrics = get_metrics("http://" + host + "/xport/" + prefix + "/" + namespace + "/" + suffix, username, password)
        print namespace + ".value " + str(metrics)

def config(file_name, namespaces, warnings=[], criticals=[]):
    print "graph_title growthforecast " + file_name
    print "graph_category growthforecast"
    
    for i, namespace in enumerate(namespaces):
        print namespace + ".label " + namespace
        print namespace + ".draw LINE1"
        if warnings and warnings[i]:
            print namespace + ".warning " + str(warnings[i]) 
        if criticals and criticals[i]:
            print namespace + ".critical " + str(criticals[i]) 

if __name__ == "__main__":
    file_name = os.path.basename(__file__)
    if os.environ.get('host'):
        host = os.environ.get('host')
    else:
        host = 'localhost:5125'
    if os.environ.get('username'):
        username = os.environ.get('username')
    else:
        username = None
    if os.environ.get('password'):
        password = os.environ.get('password')
    else:
        password = None

    namespace_prefix = os.environ.get('namespace_prefix')
    namespace_suffix = os.environ.get('namespace_suffix')
    namespaces = os.environ.get('namespaces').split(',')
    warnings = os.environ.get('warnings')
    if warnings:
        warnings = warnings.split(',')
    else:
        warnings = []
    criticals = os.environ.get('criticals')
    if criticals:
        criticals = criticals.split(',')
    else:
        criticals = []

    if len(sys.argv) > 1 and sys.argv[1] == "config":
        config(file_name, namespaces, warnings, criticals)
    else:
        munin(host, namespace_prefix, namespace_suffix, namespaces, username, password)
